#include <nesi.h>
int x=0;
/*
 *
 */
int main() {

    nesi.init();

    usb.connect();

    /**
     * Overview
     *
     * Timer 5 will be used as the keystroke timeout timer. It will generate
     * an interrupt X milliseconds after it is started (@setTimeout(X)). The
     * timer will be started when a change in the button's state is detected,
     * and stopped automatically at the end of the timeout period. The keystroke
     * is determined by the number of times the button was pressed during the
     * timeout period.
     */

    /**
     * Timer5 Configuration Setup
     *
     * Timer5 will start off and be started once the button has been pressed
     * The prescaler will be set to 1:256 so that the period is of a reasonable
     * value and resolution. The internal system oscillator will be used.
     * Gating mode and synchronous operation will not be used.
     */
    T5CON = 0x0030;  // disabled, prescaled, internal oscillator
    TMR5 = 0;        // clear the timer

    /**
     * Timer5 Period Register Setup
     *
     * The period register contains the number of counts before Timer5 resets.
     * For 0.5s the count will be half that of the prescaled clocks per second.
     *
     * Note: The count begins at 0 (rather than 1), so 1 must be subtracted
     *       from the desired value.
     */
    PR5 = (Uint16)((CLOCKS_PER_SEC/256)/1000 );  // interrupt 1/2 second later

     /**
     * Timer5 Interrupt Setup
     *
     * Interrupts are required, so the interrupt enable bit must be set, and
     * the interrupt flag must be cleared. Also, the process has normal priority.
     */
    _T5IF = OFF;  // clear the interrupt flag

    _T5IE = ON;   // enable Timer5 to interrupt

    _T5IP = 3;    // set to sub normal priority4





    T5CONbits.TON = 1;  //Turn on timer 5
/* This is where the error was. You had _TON=1, that turns on the timer for
 timer 1. To turn on the timer for timer 5 we need to have this line of code*/





    _TRISG9 = 0;              /*Set direction as output*/
    while (1) {

          _RG9 = x;    //set state of pin based off timer toggling

    }

    return (0);
}

_ISR_ _T5Interrupt() {

    _T5IF = OFF;        //clear overflow flag
    x++;               //toggle state of pin
    usb.printf("%d \r\n", x);


}
